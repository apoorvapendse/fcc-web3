oracle: 
Any device that interacts with the off-chain(data not on blockchain) world to provide external data or computation to the smart contracts
The oracle itself has to be decentralized 

hybrid smart contracts : on chain ddata + Doracles  

Chainlink = decentralized oracle network

DAO = decentralized autonomous org


Transaction Fee = Gas Price * Units of Gas used

Hash: 
A unique fixed length string to identify a piece of data. They are created by placing data into a said hash function
SHA stands for secure has algo
ethereum block chain uses keccak256 which is quite similar to SHA256 but keccak256 is more powerful

good resource: andersbrownworth.com/blockchain/hash

what miners is they try to find the nonce for any given data so that the hash of nonce and data is below certain value. That requires bruteforce iteration for every nonce value over and comparing its hash

block: list of transactions mined together (their hash is obtained by iterating with various nonce values);
nonce = number used once 
also used to measure no of transactions from a given address 

private key is used to digitally sign transaction which can then be verifed using your public key 
however you cannot decrypt the private key from the digitally signed hash

gas summary:
as more and more people use a chain, the cost per transaction will increase

sending eth by default takes 21k gas

1 Ether (ETH) = 1e9 Gwei
1 Gwei = 1e9 Wei
1 Ether (ETH) = 1e18 Wei


Consensus is the algo used to agree on the state of the blockchain
Sybil resistance:
proof of work(PoW)
all nodes do mining to find nonce for desired hash and compete for the mining bonus

proof of stake
proof stake nodes put up collateral/stake as a sybil resistance mechanism
if nodes misbehave, their stake eth will be removed
proof of stake largely reduces environmental impact because instead of every node trying to find the valid nonce, one single node is selected randomly and the other nodes just validate the hash


sharding: creating blockchains inside blockchain
layer1 : base layer blockchain implementaion
layer2 : built on top of layer1(existing blockchains)

is keyword is used to inherit a contract 

^0.8.12 is compatiable with ^0.8.7
but ^0.8.18 is not compat with ^0.5.0
we can use different versions of solidity in different contracts during inheritance or even during deploying one smart contract from other

new keyword is used to deploy contracts in other contracts

In order to interact with any smart contract you need two things, first is contract address and second is contract ABI 
ABI(Application Binary Interface)

in order to make any function over-ridable, you need to use virtual keyword during fn declaration

in order to override an already existing VIRTUAL function, you will use override keyword

if condition in require isn't met then all the previous work gets undone

Smart Contracts cannot communicate directly with the external world, most importantly APIs
This Connectivity Problem is known as the Oracle Problem
Chainlink is a decentralized oracle network through which we can bring in data in our smart contracts

for getting latest price remember to use the right address according to your mainnet/testnet

data feeds/ price feeds can be used to obtain conversion rates easily

we can generate random numbers using chain link VRF

Chainlink Keepers are used to make api calls in a decentralized manner


decimals dont work in solidity

libraries are very similar to contracts in solidity
they dont have state variables and also cant send ether

    using PriceConverter for uint256;
you can use functions defined in the library for uint256 after writing this statement in the given contract;

in previous solidity versions below 0.7.6 , incrementing a number above its range would revert its val to 0
But in newer versions it gives overflow error 
we can achieve the roll over using unchecked{number = number + x}; where addding x will make the number exceed its range;


//sending ether can be done in three ways

//transfer:(2300 gas, throws error if unsuccessful)
        
//send: also uses 2300 gas returns bool
        bool isSent = payable(msg.sender).send(address(this).balance);
        require(isSent,"withdraw failed");//this will be used to revert 
        
//call:forwards all gas,or set gas, returns bool and data || Also can be used to call any function without ABI
        (bool callSuccess, bytes memory dataReturned) = payable(msg.sender).call{value : address(this).balance}("");


//constant and immutable to save gas in solidity;
**for constant variables, the value of the variable has to be constant at compile time


** variables that are to be set only once DURING RUNTIME (for eg: called in constructor) are written as immutable

if statements with custom errors save gas compared to require statements

eg:

Method 1:
error MyError();
function withdraw() external{
  if(msg.sender!=owner){
  revert MyError();
  }
}

Method 2:
require(msg.sender==owner,"error")


//IF WITH CUSTOM ERROR iS MORE EFFICIENT THAN REQUIRE 

FALLBACK AND RECEIVE

receive is a special function in solidity that has mutability external payable

receive function is called when no data is present in the calldata

fallback is very similar to receive but only gets called if calldata has some value present in it 

CALLDATA always contains some HEX value
both fallback and receive are special functions just like the constructor functions

we can deploy contracts using new keyword

Hardhat Start:
Hardhat under the hood makes use of ethers.js library in many places

We can use library called solc to compile smart contracts

To compile using solcjs and yarn and get binary and abi file and store it in the same folder
yarn solcjs --bin --abi --include-path ./node_modules/ --base-path . -o . SimpleStorage.sol 
